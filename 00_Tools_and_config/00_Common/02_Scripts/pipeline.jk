def PrintToolVersion()
{
    echo ''' 
    Project name :                      ''' + env.JOB_NAME + '''
    Running pipeline script version :   '''+ PIPELINE_SCRIPT_VERSION + '''
    '''
}


/////////////////////
/// Helper funct. ///
/////////////////////

def TimeLog(x)
{
    timestamps 
    {
        echo "#### " + x
    }
}

def SilentSh(cmd)
{
    sh('#!/bin/bash -e\n'+cmd)
}


def RunPythonScript(python_version, script, args, log)
{
    sshagent(credentials: [SSH_KEY] ) 
    {
        echo "Work in progress..."
        SilentSh( 
        python_version +  " -u  " + script + " " + args +" 2>&1 | tee -a " + log + '''
        ret=${PIPESTATUS[0]}
        if [[ $ret -eq 0 ]]; then 
            exit 0
        elif [[ $ret -eq 2 ]]; then 
            # then kill process python
            echo "No port com Found"
            echo "Maybe python was not ended with a clean exit."
            echo "Killing python process"
            taskkill -IM python.exe -F
            sleep 5
            echo "Trying again..."
        else
            echo "Unexpected validation error: $ret"
            exit $ret
        fi''')
    }
}

def RunPythonCommand(python_version,command)
{
    sshagent(credentials: [SSH_KEY] ) 
    {
        return bat(
        returnStdout: true,
        script: '''@echo ${command}> tmp_python_File && ${python_version} tmp_python_File && rm tmp_python_File'''
        ) 
    }
}

def RunBatchScript(script)
{    
    sshagent(credentials: [SSH_KEY] ) 
    {
        bat script
    }
}

def RunShellScript(script, args)
{
    sshagent(credentials: [SSH_KEY] ) 
    {
        SilentSh(script + ''' ''' + args + '''
        ret=$?
        if [[ ! $ret -eq 0 ]]; then
            echo " --> Error ($ret) in script $(basename ''' + script + ''')"
            exit $ret
        fi'''
        )
    }
}

def StageTitle(x)
{
    echo "////////////////////////////////////////////////////\n////////>>        " + x + "\n////////////////////////////////////////////////////"
}

def StepTitle(x)
{
    echo "----------------------------------------------------\n        -->>" + x
}


/////////////////////
/// Configuration ///
/////////////////////
def CheckPipelineScript()
{
    SilentSh(
    '''
    echo "Stored pipeline script last update : $(date -r ${PIPELINE_SCRIPT})"
    echo "Current pipeline script version : ${PIPELINE_SCRIPT_VERSION}"
    version_number=$(cat ''' +PIPELINE_SCRIPT + ''' | egrep 'PIPELINE_SCRIPT_VERSION=' | grep -oP '(?<=PIPELINE_SCRIPT_VERSION=\").*(?=\")' )
    if [ "$version_number" = "${PIPELINE_SCRIPT_VERSION}" ]; then
        echo "Info : Pipeline script up to date "
    else
        echo "/////////////////////////////////////////////////////////////////////////"
        echo "/////////////////////////////////////////////////////////////////////////"
        echo "////////////                                              ///////////////"
        echo "///////////   Warning : Pipeline script is not up to date  //////////////"
        echo "////////                  $version_number != ${PIPELINE_SCRIPT_VERSION}                       //////////"
        echo "////////////                                              ///////////////"
        echo "/////////////////////////////////////////////////////////////////////////"
        echo "/////////////////////////////////////////////////////////////////////////"
        exit 1
    fi
    ''')
}


def PIPELINE_DELAY_TRICK_IN_S=1 //this delay is used to trigger the timeout which will not be triggered without (jenkins bug)
def PIPELINE_TIMEOUT_IN_S=1500  //25 minutes in second

/////////////////////
///    Pipeline   ///
/////////////////////
pipeline 
{    
    agent any
    
    triggers 
    { 
        cron('H */6 * * *')
    }
     
    environment
    {
        ///Project
        PROJECT_NAME="${env.JOB_NAME}" //Project name shall be the same for the git folder and for the jenkins job
        BUILD_ID="JenkinsBuild${env.BUILD_NUMBER}"
                
        ///Workspace
        JK_WORKSPACE = "C:/_Jenkins_new_${env.FIRST_TIMESTAMP}" //TO_BE_REMOVED : the timestamp shall be remove, used for testing robustness purposes
        SCRIPT_AND_TOOLS_FOLDER = '00_Tools_and_config'
        SOURCES_FOLDER = '01_C_Sources'
        SCRIPT_AND_TOOLS_PATH = "${JK_WORKSPACE}/${SCRIPT_AND_TOOLS_FOLDER}"
        SOURCES_PATH = "${JK_WORKSPACE}/${SOURCES_FOLDER}"
        PROJECT_SOURCES_PATH = "${SOURCES_PATH}/${PROJECT_NAME}"
        VALIDATION_LOG_PATH = "${JK_WORKSPACE}/${SCRIPT_AND_TOOLS_FOLDER}/01_Projects/${PROJECT_NAME}/01_Logs/${BUILD_ID}"
        
        ///This pipeline script
        PIPELINE_SCRIPT_VERSION="v1.0.RC1"
        PIPELINE_SCRIPT="${SCRIPT_AND_TOOLS_PATH}/00_Common/02_Scripts/pipeline.jk"
        FIRST_TIMESTAMP=sh(returnStdout: true,script:'''#!/bin/sh -e\necho "$(date +"%Y%m%d")"''').trim() // TO_BE_REMOVED : once a day, change the directory, for testing robustness purposes

        ///SSH credentials
        SSH_KEY='dugast-ssh'
        SSH_USERNAME='dugastg'
        
        ///Full Build Script
        USER_SHORTCUT_FOLDER = "${SCRIPT_AND_TOOLS_PATH}/02_User_shortcuts/"
        SOURCE_UPDATE_FILE   = "01_update_sources_files_for_project.sh"
        BUILD_FILE    = "02_build_binaries_for_project.sh"        
        FLASH_FILE    = "03_flash_board_with_built_binaries_for_project.sh"
        VALIDATION_FILE    = "04_run_full_campaign_for_project.sh"
        
        ///Test env repo
        SCRIPT_AND_TOOL_GIT_URL = "ssh://gitolite@codex.cro.st.com/mcuembswappli/Test_Automation/stm32wb_ate.git"
        SCRIPT_AND_TOOL_GIT_BRANCH = "master"
        
        ///Validation report
        VALIDATION_REPORT = "${VALIDATION_LOG_PATH}/validationReport.xml"
    }
    
    options
    {
        timeout(time: PIPELINE_TIMEOUT_IN_S, unit: 'SECONDS')
    }
       
    stages
    {
        stage("Tool Information")
        {      
            steps 
            {
                script
                {                
                    StageTitle("Tool information")
                    
                    PrintToolVersion()
                     
                    SilentSh(
                    '''
                    echo "shell user is : \$(whoami), watch out for SSH credentials to match the username."
                    echo "updating ssh known hosts"  
                    ssh-keygen -R gerrit.st.com
                    ssh-keygen -R codex.cro.st.com
                    ssh-keyscan -t rsa gerrit.st.com >> ~/.ssh/known_hosts
                    ssh-keyscan -t rsa codex.cro.st.com >> ~/.ssh/known_hosts
                    ''')
                                                                                
                }
                
                sleep(time: PIPELINE_DELAY_TRICK_IN_S,unit:"SECONDS")
            }
        }  // tool

        stage("Scripts Update")
        {
            steps 
            {
                script
                {
                    StageTitle("Setup environment")
                    
                    
                    StepTitle("Creating workspace")
                    SilentSh( '''            
                    if [ ! -d "'''+JK_WORKSPACE+'''" ]; then
                        echo "creating folder : $(basename ${JK_WORKSPACE})"
                        mkdir -p '''+JK_WORKSPACE+'''
                    fi
                    ''')
                    TimeLog("Workspace folder ready")
                    

                    StepTitle("Updating test env scripts")
                    dir(JK_WORKSPACE) 
                    {
                        sshagent(credentials: [SSH_KEY] ) 
                        {
                            SilentSh( '''
                            newProject=$(if [[ ! -e '''+SCRIPT_AND_TOOLS_PATH+''' ]]; then echo "true"; else echo "false"; fi)
                            
                            if [[ "$newProject" = "true" ]]; then
                                mkdir -p stm32wb_ate
                                cd stm32wb_ate
                                git init
                            else
                                cd '''+SCRIPT_AND_TOOLS_PATH+'''
                            fi
                            
                            pwd
                            ls
                            
                            if [[ $(git branch -r | grep "origin/'''+SCRIPT_AND_TOOL_GIT_BRANCH+'''") && $(git remote -v | grep "origin") ]]; then
                                echo "url already exists, skipping."
                            else
                                git remote add origin '''+SCRIPT_AND_TOOL_GIT_URL+'''
                            fi

                            git fetch origin '''+SCRIPT_AND_TOOL_GIT_BRANCH+'''
                            git reset --hard origin/'''+SCRIPT_AND_TOOL_GIT_BRANCH+'''
                            
                            cd ..
                            if [[ "$newProject" = "true" ]]; then
                                mv ${PWD}/stm32wb_ate '''+SCRIPT_AND_TOOLS_PATH+'''
                                mkdir -p 01_C_Sources/                         
                            fi
                            ''')
                        }
                    }
                    TimeLog("Test environment ready"  )  


                    StepTitle("Display test env version")
                    dir(SCRIPT_AND_TOOLS_PATH) 
                    {
                        SilentSh( '''            
                        source "${SCRIPT_AND_TOOLS_PATH}/00_Common/02_Scripts/Common.lib"
                        display_test_env_version
                        ''')
                    }
                    
                    StepTitle("Displaying information about Jenkins pipeline script")
                    TimeLog("Checking jenkins script version and syntax")
                    CheckPipelineScript()
                    TimeLog("Jenkins script checked")
                }

                sleep(time: PIPELINE_DELAY_TRICK_IN_S,unit:"SECONDS")
            }
        }  // script update
                    
        stage("Sources Update")
        {
            steps 
            {

                script
                {
                    StageTitle("Updating project sources")
                     
                    StepTitle("Running script")
                    TimeLog("started")
                    dir(USER_SHORTCUT_FOLDER) 
                    {
                        RunShellScript("./" + SOURCE_UPDATE_FILE,"${PROJECT_NAME} ${BUILD_ID} ${SSH_USERNAME}")
                    }
                    TimeLog("ended")
        
                }

                sleep(time: PIPELINE_DELAY_TRICK_IN_S,unit:"SECONDS")
            }
        }  // source update

        stage("Build")
        {
            steps 
            {

                script
                {
                    StageTitle("Building project binary")
                     
                    StepTitle("Running script")
                    TimeLog("started")     
                    dir(USER_SHORTCUT_FOLDER) 
                    {
                        RunShellScript("./" + BUILD_FILE,"${PROJECT_NAME} ${BUILD_ID}")
                    }
                    TimeLog("ended")
        
                }

                sleep(time: PIPELINE_DELAY_TRICK_IN_S,unit:"SECONDS")
            }
        }  // buils

        stage("Flash")
        {
            steps 
            {

                script
                {
                    StageTitle("Flashing project binary")
                     
                    StepTitle("Running script")
                    TimeLog("started")     
                    dir(USER_SHORTCUT_FOLDER) 
                    {
                        RunShellScript("./" + FLASH_FILE,"${PROJECT_NAME} ${BUILD_ID}")
                    }
                    TimeLog("ended")
        
                }

                sleep(time: PIPELINE_DELAY_TRICK_IN_S,unit:"SECONDS")
            }
        } // flash
        
        stage("Validation")
        {
            steps 
            {
                script
                {
                    StageTitle("Running project validation campaign")
                     
                    StepTitle("Running script")
                    TimeLog("started")     
                    dir(USER_SHORTCUT_FOLDER) 
                    {
                        RunShellScript("./" + VALIDATION_FILE,"${PROJECT_NAME} ${BUILD_ID} JENKINS")
                    }
                    TimeLog("ended")
        
                }

                sleep(time: PIPELINE_DELAY_TRICK_IN_S,unit:"SECONDS")
            }
        } // valid

        stage("Display")
        {
            steps 
            {
                script
                {
                    StageTitle("Load and display data")
                     
                    StepTitle("JUnit report loaded for Test result analyzer plugin")
                    if(!fileExists(VALIDATION_REPORT))
                    {
                        throw new Exception("error : junit report file does not exist")
                    }                
                    else
                    {
                        dir(VALIDATION_LOG_PATH)
                        {    
                            VALIDATION_REPORT_BASENAME=sh(
                                                        returnStdout: true,
                                                        script:'''#!/bin/bash -e\n'''+"""basename ${VALIDATION_REPORT} | tr -d '\r' | tr -d '\n'"""
                                                        )
                            echo "validation report exists: " + VALIDATION_REPORT_BASENAME
                            //SilentSh("""touch validationReport.xml""")// update timestamp for xml file in case file is too old (more than a couple of minutes)
                            junit 'validationReport.xml'
                        }
                    }
                    TimeLog("Validation report loaded")
                }

                sleep(time: PIPELINE_DELAY_TRICK_IN_S,unit:"SECONDS")
            }
        } // display
            
    } // stages
    

} // pipeline

